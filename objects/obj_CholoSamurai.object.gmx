<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_CholoSamurai</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

grav = 1.3;
max_grav = 20;
hsp = 0;
vsp = 0;
jumpspeed = 25;
movespeed = 10;
dir = 1;

can_attack = false;
alarm[1] = 1;

attack_delay = 30;
attack_duration = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack Delay

can_attack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Attack Object

if (instance_exists(obj_Attack)) {
    with (obj_Attack) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the player's input

key_right   = keyboard_check(vk_right);
key_left    = -keyboard_check(vk_left);
key_jump    = keyboard_check_pressed(vk_space);

move = key_left + key_right;

if (move != 0) {
    dir = move;
}

hsp = move * movespeed;

if (vsp &lt; max_grav) {
    vsp += grav;
}

for (var i = 0; i &lt; instance_number(obj_Floor); i++) {
    if (instance_place(x, y + 1, instance_find(obj_Floor, i)) != noone &amp;&amp; instance_find(obj_Floor, i).is_solid) {
         vsp = key_jump * -jumpspeed;
    }
}

// This logic will toggle all is_solid properties
with (obj_Floor) {
    if (obj_CholoSamurai.y + (obj_CholoSamurai.sprite_height / 2) &gt; y - (sprite_height / 2) + 1) {
        image_alpha = 0.5;
        is_solid = false;
    } else {
        image_alpha = 1;
        is_solid = true;
    }
}

// This logic will check wether the object is colliding with any obj_Floor instance
// Each axis will be checked separately
// For the Y axis, collisions from the bottom will have no effect (that's what the is_solid property is for)
for (var i = 0; i &lt; instance_number(obj_Floor); i++) {

    // The current floor instance
    var current_floor_instance = instance_find(obj_Floor, i);
    
    // Y axis collision check (with is_solid check)
    if (instance_place(x, y + vsp, current_floor_instance) != noone &amp;&amp; current_floor_instance.is_solid) {

        while (instance_place(x, y + sign(vsp), current_floor_instance) == noone) {
            y += sign(vsp);
        }
        vsp = 0;
    }
    
    // X axis collision check
    if (instance_place(x + hsp, y, obj_Floor) != noone) {
        while (instance_place(x + sign(hsp), y, obj_Floor) == noone) {
            x += sign(hsp);
        }
        hsp = 0;
    }
}

// Apply velocity
y += vsp;
x += hsp;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Attack Button

key_attack = keyboard_check_pressed(ord('Z'));


if (key_attack) {
    // Create according to direction
    if (can_attack) {
        if (dir == 1) attack = instance_create(x + sprite_width, y, obj_Attack);
        if (dir == -1) attack = instance_create(x - sprite_width, y, obj_Attack);
        
        can_attack = false;
        alarm[1] = attack_delay;    // time until can attack again
    }
    alarm[0] = attack_duration;   // obj_Attack destruction
}

if (instance_exists(obj_Attack)) {
    // Attack following player
    attack.y = y;
    attack.x = x + sprite_width;
    if (dir == 1) attack.x = x + sprite_width;
    if (dir == -1) attack.x = x - sprite_width;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
