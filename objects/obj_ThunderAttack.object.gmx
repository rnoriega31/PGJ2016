<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize state

enum state_thunder_attack {
    idle,
    homing_start,
    homing_stop,
    hitbox_active,
    hitbox_spreading,
    finished
}

state = state_thunder_attack.idle;

// TODO: set frames
var delay_state_homing_start        = 20;
var delay_state_homing_stop         = 80;
var delay_state_hitbox_active       = 110;
var delay_state_hitbox_floor_spread = 120;
var delay_state_finished            = 130;

// Set right hand to thunder_attack_opening
right_hand                  = instance_find(obj_RightHand, 0);
right_hand.is_invinsible    = true; // TODO: maybe move to hand's step??
right_hand.state            = state_right_hand.attack_thunder_opening;


alarm[0] = delay_state_homing_start;
alarm[1] = delay_state_homing_stop;
alarm[2] = delay_state_hitbox_active;
alarm[3] = delay_state_hitbox_floor_spread;
alarm[4] = delay_state_finished;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Returns everything to pre-attack state

// Removes right hand invinsibility
right_hand.is_invinsible = false;

// Returns to right hand original sprite
right_hand.state = state_right_hand.idle;

// Destroys thunder indicator
with (obj_ThunderIndicator) {
    state = state_thunder_indicator.finished;
}

// Destroys thunders
with (obj_Thunder) {
    state = state_thunder.finished;
}
with (obj_ThunderFloor) {
    state = state_thunder_floor.finished;
}

// Destroys hitboxes
with (obj_HitboxThunderAttack) {
    state = state_hitbox_thunder_attack.finished;
}
with (obj_HitboxThunderAttackFloor) {
    state = state_hitbox_thunder_attack_floor.finished;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changes state to finished
state = state_thunder_attack.finished;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changes state to finished
state = state_thunder_attack.hitbox_spreading;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changes state to hitbox_active

state = state_thunder_attack.hitbox_active;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change state to homing_stop
state = state_thunder_attack.homing_stop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change state to homing_start

state = state_thunder_attack.homing_start;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {

    case state_thunder_attack.idle:
        break;

    case state_thunder_attack.homing_start:
    
        if(! instance_exists(obj_ThunderIndicator)) {
        
            // Creates Indicator
            var thunder_indicator = instance_create(
                obj_CholoSamurai.x, 
                (obj_Floor.y - obj_Floor.sprite_height / 2), 
                obj_ThunderIndicator
            );
            
            // Updates States
            thunder_indicator.state = state_thunder_indicator.homing;
            right_hand.state        = state_right_hand.attack_thunder_charging;
        }
        
        break;
        
    case state_thunder_attack.homing_stop: 
    
        with (obj_ThunderIndicator) {
            state = state_thunder_indicator.idle;
        }
        
        break;
        
    case state_thunder_attack.hitbox_active:
    
        with (obj_ThunderIndicator) {
            instance_create(x, 0, obj_Thunder);
            instance_create(x, 0, obj_HitboxThunderAttack);
        }
        
        right_hand.state = state_right_hand.attack_thunder_release;
    
        break;
        
    case state_thunder_attack.hitbox_spreading:
        
        instance_create(room_width / 2, (obj_Floor.y - obj_Floor.sprite_height / 2), obj_ThunderFloor);
        instance_create(room_width / 2, (obj_Floor.y - obj_Floor.sprite_height / 2), obj_HitboxThunderAttackFloor);
        break;
        
    case state_thunder_attack.finished:
        instance_destroy();
        break;
        
    default:
        show_debug_message("error: thunder attack state");
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
