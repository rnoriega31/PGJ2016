<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>right_hand = instance_find(obj_RightHand, 0);

// When the indicator will stop following the player
indicator_movement_window = 60;

// When will the thunder fall
thunder_spawn_delay = 90;

// Right Hand sprite initial configuration
right_hand.is_invinsible    = true;
right_hand.sprite_index     = spr_RightHandAttackThunderOpening;
right_hand.image_speed      = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Logic

right_hand.is_invinsible = false;

// Destroys thunder indicator
if (instance_exists(obj_ThunderIndicator)) {
    with (obj_ThunderIndicator) {
        instance_destroy();
    }
}

// Destroys thunder
if (instance_exists(obj_Thunder)) {
    with (obj_Thunder) {
        instance_destroy();
    }
}

if (instance_exists(obj_HitboxThunderAttack)) {
    with (obj_HitboxThunderAttack) {
        instance_destroy();
    }
}


// Returns to right hand original sprite
right_hand.sprite_index = spr_RightHand;
right_hand.image_speed  = 0;

// TODO: Destruir Hitbox del trueno
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawns Thunder and Hitbox

with (obj_ThunderIndicator) {
    instance_create(x, 0, obj_Thunder);
    instance_create(x, 0, obj_HitboxThunderAttack);
}

// Instanciar el hitbox
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stops following the player

indicator = instance_find(obj_ThunderIndicator, 0);
indicator.should_follow_player = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init indicator and thunder timers

// Get last sprite index
var last_sprite = right_hand.image_number - 1;

if (right_hand.sprite_index == spr_RightHandAttackThunderOpening) {

    if(right_hand.image_index == last_sprite) {
        
        if(! instance_exists(obj_ThunderIndicator)) {
        
            var player = instance_find(obj_CholoSamurai, 0);
            
            // Creates Indicator
            thunder_indicator = instance_create(player.x, (obj_Floor.y - obj_Floor.sprite_height / 2), obj_ThunderIndicator);
            
            // Callback to stop the indicator from following the player
            alarm[0] = indicator_movement_window;
            
            // Callback to spawn the thunder
            alarm[1] = thunder_spawn_delay;
            
            right_hand.sprite_index = spr_RightHandAttackThunderIdle;
        }
    }
}

if (instance_exists(obj_Thunder)) {
    thunder = instance_find(obj_Thunder, 0);
    if (thunder.image_index == thunder.image_number - 1) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
