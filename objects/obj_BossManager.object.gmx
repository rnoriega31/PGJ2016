<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init machine state and registers posible attacks

enum state_boss_manager {
    idle,
    ready,    
}

state = state_boss_manager.ready;

// Boss Manager delay
delay_state_ready = 180;

// Left  Hand delays
delay_left_hand_state_idle = 360;

attack_list = ds_list_create();

ds_list_add(attack_list, obj_PunchAttack);
ds_list_add(attack_list, obj_ThunderAttack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroys the attack list
ds_list_destroy(attack_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Changes left hand state back to idle
with(obj_LeftHand) {
    state = state_left_hand.idle;
    e_health = e_max_health;   
}

// TODO: move to state??
with(obj_Platform) {
    instance_destroy();
}

show_debug_message("callback for reviving hand");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change state to ready
state = state_boss_manager.ready;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manages state machine

switch (state) {
    case state_boss_manager.idle:
        break;
        
    case state_boss_manager.ready:    
    
        /// Choose an attack randomly
        var index = random_range(0,2); // Range inclusion is [n,m)
        
        var attack = ds_list_find_value(attack_list, index);
        
        // TODO: maybe check if an attack can be instantiated multiple times instead??
        if(! instance_exists(attack)) {
        
            var create = false;
        
            // Forgive me Liskov
            if (attack == obj_PunchAttack) {
                with(obj_LeftHand) {
                    if (state != state_left_hand.stunned) {
                        create = true;
                    }
                }
            }
            
            if (attack == obj_ThunderAttack) {
                create = true;
            }            
        
            if (create) {
                instance_create(0, 0, attack);
            
                state = state_boss_manager.idle;
            }    
        }
        
        // Callback for next attack
        alarm[0] = delay_state_ready;        
        
        break;
        
    default:
        show_debug_message("error: state boss manager");
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manages left hand state

var callback_delay = delay_left_hand_state_idle;

with(obj_LeftHand) {
    if (e_health == 0) {
    
        if(! instance_exists(obj_Platform)) {
            // Change state to stunned
            state = state_left_hand.stunned;
            
            // Spawn a platform
            instance_create(
                x,
                y - (sprite_height / 2),
                obj_Platform // TODO: rename to platform right so it doesnt conflict with the right hand's one???
            );
            
            // Set a callback to return to idle
            show_debug_message("time: " + string(callback_delay));
            other.alarm[1] = callback_delay;
        }
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
